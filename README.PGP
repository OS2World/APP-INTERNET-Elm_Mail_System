Using Elm for OS/2 together with the PGP public key encryption software
-----------------------------------------------------------------------

This version of Elm transparently supports encryption of e-mail messages
with the popular PGP software. PGP (currently at version 2.6.2,
international version is 2.6.2i) is available for OS/2 too, usually from
the same sites that archive this Elm package for OS/2. It is not
included with Elm but required if you want to use the PGP support in
Elm!

This PGP support in Elm was written by Kai Uwe Rommel (see README.OS2
for address), based on ideas and an initial prototype version written by
Rodney R. Korte (korte@sabine.psu.edu).


How does it work? - sending messages encrypted with PGP
-------------------------------------------------------

To send a message to someone encrypted by PGP, put a line into the 
message that just reads:

[pgp-encrypt]

This is in analogy to Elm's standard [encode] feature. If you use the
[pgp-encrypt] statement, the message is encrypted by calling PGP just
after you press the 's' key in the send menu. PGP will prompt you for
the pass phrase to your secret key in order to sign your message. PGP
will encrypt the message for any address found in the To:, Cc: and Bcc:
fields of the message as well as for yourself, the sender (this is done
because you should be able to decrypt and read the message later
yourself too, in case you have set up Elm to save copies of outgoing
messages).

This method assumes that you have public keys for any of the recipient
addresses in your PGP public key ring. If this is not the case or the
name used in the public key is different from the e-mail address (or
ambiguous), you can also use the following form of the [pgp-encrypt]
directive:

[pgp-encrypt name1 name2 ... namex]

In this case, the message is encrypted only for the listed names and
not even for yourself (you have to include your own name explicitly,
if needed).

The [pgp-encrypt] directive may be on any line in the message, it does
not necessarily have to be at the top of the message (although this is
generally a good idea). You could perhaps include the [pgp-encrypt] line
in your signature file. Then it is included in every message sent and
thus all outgoing messages are encrypted. However, Elm always calls PGP
to encrypt the entire message body, not only a part of it. This differs
from the behaviour of the standard Elm [encode] directive.


How does it work? - reading received PGP-encrypted messages
-----------------------------------------------------------

If you receive a message which is encrypted by PGP, Elm automatically
detects this fact and calls PGP to decrypt the message whenever you
attempt to view the message. This works with the builtin viewer as
well as any external viewer. PGP will prompt you for the pass phrase
of your secret key in order to decrypt the message before the actual
viewer starts.

The decryption of PGP messages while viewing them is only done when
message filtering is enabled (i.e. the weed=ON parameter is set in
your Elm configuration file, which is usually the case). This has the
side effect that you can always see the original (encrypted/ASCII) 
version of an PGP-encrypted message by using the 'h' (message with 
headers) command.

This version of Elm can also properly view PGP-encrypted messages which
were generated by other programs (i.e. not by another instance of this
Elm version), even if there are multiple pgp message blocks in the mail
message (this Elm version does never generate such messages; all
PGP-encrypted messages generated by this Elm version have only one
PGP-block and no other clear text before or after it). 

If there is extra clear text around the pgp message block(s) (i.e. when
the message was not created by another instance of this Elm version),
then all clear text before any pgp block is displayed first, followed by
all of the decrypted text, which is then followed by all original clear
text between pgp blocks (if there were multiple ones) and all clear text
after the last pgp block. This is a limitation dictated by my lazyness
to modify Elm too much. It applies only if there are more than one pgp
message blocks in the mail message *and* if there is clear (not ncrypted)
text *between* these multiple pgp blocks. Since this is a rather rare
situation, one can probably live with this limitation.

If you reply to an encrypted message or forward one and choose to edit
the message, you will be prompted if you want Elm to decrypt the message
before quoting it. In this case, Elm also puts in a new [pgp-encrypt]
line automatically so the outgoing message will be also pgp-encrypted,
unless you manually remove this line, for security reasons.

The message is not decrypted when you print it, for security reasons,
because printout data often passes over a LAN to some place where the
printer is located and other people could be able to read the message.
You have to save/decrypt/print manually, if you want to. However, it
is usually for a reason why a message is PGP-encrypted, so you will
probably never want to print an encrypted message anyway.


How does it work? - sending messages with a PGP signature only
--------------------------------------------------------------

Sometimes you may want that the recipient should be able to verify that
a message was indeed written by you. PGP therefore by default also
"signs" every message with your secret key so that anyone with your
public key can verify that it was indeed signed by you. In some cases,
you want to send a message signed this way but not encrypted, in case
you are not sure that all recipients have PGP available and that you
have their public key.

In order to get a sent message only signed, not encrypted, use

[pgp-sign]

instead of the [pgp-encrypt] as described above. This directs Elm to let
PGP only sign the message, resulting in a human readable text. For this
kind of signature, PGP only needs you secret key but no key of any
recipient of the message.

If this version of Elm receives such a message, it will also automatically
check if the signature is valid (you need to have the matching public key).


WARNING WARNING WARNING !!!
---------------------------

In the process of decrypting (as in replying to an encrypted message),
editing, encrypting, sending, and viewing, your message will be
written to disk in the directory pointed to by the TMP environment
variable, often in plain text form. USE A RAM DISK for your temporary
files if you are concerned about security. Also, beware of editors
that make backup copies. These do not get deleted by Elm, and may even
be put in a different directory, depending on how the editor is set
up. This is especially important when decrypting a message for
replying. The editor loads the plain text file, you reply and the
editor saves a backup of the plain text file.
